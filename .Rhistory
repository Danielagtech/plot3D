data = doa_points,
x = ~Densidad,
y = ~Rendimiento,
type = 'scatter',
mode = 'markers',
marker = list(size = 10, color = 'black', symbol = 'diamond'),
name = 'DOA (Dosis Óptima Agronómica)',
hoverinfo = 'text',
text = ~paste("Ambiente: ", Ambiente, "<br>Densidad DOA: ", round(Densidad, 1),
"<br>Rendimiento: ", round(Rendimiento, 2)),
showlegend = FALSE
) %>%
# Agregar puntos DOE
add_trace(
data = doe_points,
x = ~Densidad,
y = ~Rendimiento,
type = 'scatter',
mode = 'markers',
marker = list(size = 10, color = 'blue', symbol = 'circle'),
name = 'DOE (Dosis Óptima Económica)',
hoverinfo = 'text',
text = ~paste("Ambiente: ", Ambiente, "<br>Densidad DOE: ", round(Densidad, 1),
"<br>Margen Bruto: ", round(MB, 2)),
showlegend = FALSE
) %>%
layout(
title = "Modelo de regresión",
xaxis = list(title = "Densidad (miles/ha)", titlefont = list(size = 14), tickfont = list(size = 14)),
yaxis = list(title = "Rendimiento (tn/ha)", titlefont = list(size = 14), tickfont = list(size = 14)),
legend = list(title = list(text = "Ambiente"), font = list(size = 14))
)
})
output$tabla_resumen_densidad <- renderDT({
pred <- valores_predichos_densidad()
if (is.null(pred) || nrow(pred) == 0) {
return(data.frame(Resultado = "Sin datos disponibles"))
}
resumen <- pred %>%
group_by(Ambiente) %>%
summarise(
`Rinde (DOA)` = round(max(Rendimiento), 2),
`Densidad (DOA)` = round(Densidad[which.max(Rendimiento)], 2),
`Rinde (DOE)` = round(Rendimiento[which.max(MB)], 2),
`Densidad (DOE)` = round(Densidad[which.max(MB)], 2),
`Margen Bruto Máximo (USD)` = round(max(MB), 2)
)
datatable(resumen,
options = list(
dom = 't',  # Ocultar opciones de búsqueda, paginación, etc.
pageLength = 5,
autoWidth = TRUE,
columnDefs = list(
list(className = 'dt-center', targets = "_all")  # Centrar columnas
)
),
rownames = FALSE,
class = 'cell-border stripe hover') %>%
formatStyle(
columns = colnames(resumen),
backgroundColor = 'lightgrey',  # Fondo gris claro
fontSize = '15px',             # Fuente más grande
textAlign = 'center'           # Centrado del texto
) %>%
formatStyle(
columns = colnames(resumen),
fontWeight = 'bold',           # Negrita para encabezados
color = 'black'                # Texto negro para encabezado
) %>%
formatStyle(
columns = colnames(resumen),
background = styleColorBar(resumen$`Margen Bruto Máximo (USD)`, 'lightblue') # Fondo gradual en columnas numéricas
)
})
#------------------------------------------------------------------------------
#Hibridos comparativo
# Reactivo para filtrar los coeficientes del modelo DxA
coef_comparativo <- reactive({
coeficientes_csv %>%
filter(Modelo == "DxA")  # Solo filtrar por el modelo DxA
})
# Renderizar el selector para Híbrido 1
output$hibrido_1 <- renderUI({
hibridos_validos <- coef_comparativo() %>%
pull(Hibrido) %>%
unique()
if (length(hibridos_validos) == 0) {
hibridos_validos <- "No hay híbridos disponibles para este modelo"
}
selectInput("hibrido_1", "Seleccione el Híbrido 1:", choices = hibridos_validos)
})
# Renderizar el selector para Híbrido 2
output$hibrido_2 <- renderUI({
hibridos_validos <- coef_comparativo() %>%
pull(Hibrido) %>%
unique()
if (length(hibridos_validos) == 0) {
hibridos_validos <- "No hay híbridos disponibles para este modelo"
}
selectInput("hibrido_2", "Seleccione el Híbrido 2:", choices = hibridos_validos)
})
# Obtener los valores para la comparación
valores_comparativo <- reactive({
req(input$hibrido_1, input$hibrido_2, input$ambiente_comparativo)
densidades <- seq(45, 80, by = 1)
resultados <- list()
# Procesar el Híbrido 1
coefs_1 <- coef_comparativo() %>%
filter(Hibrido == input$hibrido_1) %>%
select(Field, Region,
b0 = paste0("b0_", tolower(input$ambiente_comparativo)),
b1_x = paste0("b1_x_", tolower(input$ambiente_comparativo)),
b3_xx = paste0("b3_xx_", tolower(input$ambiente_comparativo)))
if (nrow(coefs_1) > 0) {
valores_1 <- calcular_valores_densidad(
coefs = unlist(coefs_1[1, 3:5], use.names = FALSE),
densidades = densidades,
precio_tha = input$precio_tha_comparativo,
costoX = input$costoX_comparativo
)
valores_1$Hibrido <- paste0(input$hibrido_1, " (Híbrido 1)")
valores_1$Field <- coefs_1$Field[1]
valores_1$Region <- coefs_1$Region[1]
resultados[[1]] <- valores_1
}
# Procesar el Híbrido 2
coefs_2 <- coef_comparativo() %>%
filter(Hibrido == input$hibrido_2) %>%
select(Field, Region,
b0 = paste0("b0_", tolower(input$ambiente_comparativo)),
b1_x = paste0("b1_x_", tolower(input$ambiente_comparativo)),
b3_xx = paste0("b3_xx_", tolower(input$ambiente_comparativo)))
if (nrow(coefs_2) > 0) {
valores_2 <- calcular_valores_densidad(
coefs = unlist(coefs_2[1, 3:5], use.names = FALSE),
densidades = densidades,
precio_tha = input$precio_tha_comparativo,
costoX = input$costoX_comparativo
)
valores_2$Hibrido <- paste0(input$hibrido_2, " (Híbrido 2)")
valores_2$Field <- coefs_2$Field[1]
valores_2$Region <- coefs_2$Region[1]
resultados[[2]] <- valores_2
}
do.call(rbind, resultados)
})
# Gráfico comparativo
output$plotComparativoDensidad <- renderPlotly({
pred <- valores_comparativo()
if (is.null(pred) || nrow(pred) == 0) {
return(plotly_empty())
}
# Calcular DOA y DOE para cada híbrido
doa_points <- pred %>% group_by(Hibrido) %>% slice_max(Rendimiento)
doe_points <- pred %>% group_by(Hibrido) %>% slice_max(MB)
plot_ly(
data = pred,
x = ~Densidad,
y = ~Rendimiento,
color = ~Hibrido,
type = 'scatter',
mode = 'lines',
hoverinfo = 'text',
text = ~paste("Híbrido: ", Hibrido,
"<br>Densidad: ", round(Densidad, 1),
"<br>Rendimiento: ", round(Rendimiento, 2),
"<br>Año: ", Field,
"<br>Región: ", Region)
) %>%
# Agregar puntos DOA
add_trace(
data = doa_points,
x = ~Densidad,
y = ~Rendimiento,
type = 'scatter',
mode = 'markers',
marker = list(size = 10, color = 'black', symbol = 'diamond'),
name = 'DOA (Dosis Óptima Agronómica)',
hoverinfo = 'text',
text = ~paste("Híbrido: ", Hibrido,
"<br>Densidad DOA: ", round(Densidad, 1),
"<br>Rendimiento: ", round(Rendimiento, 2),
"<br>Año: ", Field,
"<br>Región: ", Region),
showlegend = FALSE
) %>%
# Agregar puntos DOE
add_trace(
data = doe_points,
x = ~Densidad,
y = ~Rendimiento,
type = 'scatter',
mode = 'markers',
marker = list(size = 10, color = 'blue', symbol = 'circle'),
name = 'DOE (Dosis Óptima Económica)',
hoverinfo = 'text',
text = ~paste("Híbrido: ", Hibrido,
"<br>Densidad DOE: ", round(Densidad, 1),
"<br>Margen Bruto: ", round(MB, 2),
"<br>Año: ", Field,
"<br>Región: ", Region),
showlegend = FALSE
) %>%
layout(
title = "Comparativo de Curvas de Densidad",
xaxis = list(title = "Densidad (miles/ha)", titlefont = list(size = 14)),
yaxis = list(title = "Rendimiento (tn/ha)", titlefont = list(size = 14)),
legend = list(title = list(text = "Híbridos"))
)
})
#-------------Ambientes -------------------------------
observe({
# Verifica y selecciona el lote
lote <- if (is.null(input$lote)) {
showNotification("Lote no seleccionado. Cargando 'Guayaibi' por defecto.", type = "warning")
"Guayaibi"
} else {
input$lote
}
archivo <- switch(lote,
"Guayaibi" = "Guayaibi.shp",
"Pertenencia" = "Pertenencia.shp",
"Laguna" = "Laguna.shp",
"Huinca_Martinez" = "Huinca_Martinez.shp",
stop("Lote no válido"))
# Cargar y procesar los datos
datos <- st_read(archivo)
datos <- st_make_valid(datos)
datos <- st_collection_extract(datos, "POLYGON")
datos_coords <- st_coordinates(st_centroid(datos, of_largest_polygon = TRUE))
datos <- cbind(datos, datos_coords)
# Aplicar Fuzzy C-Means para cosecha
valid_cosecha <- datos %>% filter(!is.na(Rinde))
result_cosecha <- apply_fuzzy_cmeans(valid_cosecha, "Rinde", centers = 3)
datos$cluster_cosecha <- result_cosecha$labels
# Aplicar Fuzzy C-Means para prescripciones
valid_prescripciones <- datos %>% filter(!is.na(Semilla))
result_prescripciones <- apply_fuzzy_cmeans(valid_prescripciones, "Semilla", centers = 3)
datos$cluster_prescripciones <- result_prescripciones$labels
# Comparar clusters
datos$comparacion <- ifelse(datos$cluster_cosecha == datos$cluster_prescripciones, "Igual", "Diferente")
# Calcular frecuencias relativas
frecuencias_relativas <- calcularFrecuencias(datos)
frecuencias_df <- as.data.frame(as.table(frecuencias_relativas))
colnames(frecuencias_df) <- c("cluster_prescripciones", "cluster_cosecha", "frecuencia")
# Mapa de cosecha
output$mapa_cosecha <- renderLeaflet({
if ("cosecha" %in% input$mapas_seleccionados) {
cluster_means <- tapply(datos$Rinde, datos$cluster_cosecha, mean, na.rm = TRUE)
ordered_clusters <- names(sort(cluster_means))
palette <- colorFactor(palette = c("red", "yellow", "green"), levels = ordered_clusters)
leaflet(datos) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addCircleMarkers(
lng = ~X, lat = ~Y,
color = ~palette(cluster_cosecha),
fillOpacity = 1, radius = 3,
popup = ~paste("Cluster:", cluster_cosecha)
) %>%
addLegend(
position = "bottomright",
colors = c("red", "yellow", "green"),
labels = ordered_clusters,
title = "Cosecha",
opacity = 1
) %>%
fitBounds(lng1 = min(datos$X), lat1 = min(datos$Y), lng2 = max(datos$X), lat2 = max(datos$Y))
}
})
# Mapa de prescripciones
output$mapa_prescripciones <- renderLeaflet({
if ("prescripcion" %in% input$mapas_seleccionados) {
cluster_means <- tapply(datos$Semilla, datos$cluster_prescripciones, mean, na.rm = TRUE)
ordered_clusters <- names(sort(cluster_means))
palette <- colorFactor(palette = c("red", "yellow", "green"), levels = ordered_clusters)
leaflet(datos) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addCircleMarkers(
lng = ~X, lat = ~Y,
color = ~palette(cluster_prescripciones),
fillOpacity = 1, radius = 3,
popup = ~paste("Cluster:", cluster_prescripciones)
) %>%
addLegend(
position = "bottomright",
colors = c("red", "yellow", "green"),
labels = ordered_clusters,
title = "Prescripciones",
opacity = 1
) %>%
fitBounds(lng1 = min(datos$X), lat1 = min(datos$Y), lng2 = max(datos$X), lat2 = max(datos$Y))
}
})
output$mapa_comparacion <- renderLeaflet({
if ("comparacion" %in% input$mapas_seleccionados) {
leaflet(datos) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%
addCircleMarkers(
lng = ~X, lat = ~Y,
color = ~colorFactor(palette = c("red", "green"), domain = datos$comparacion)(comparacion),
fillOpacity = 1, radius = 3,
popup = ~paste("Comparación:", comparacion)
) %>%
addLegend(
position = "bottomright",
colors = c("red", "green"),
labels = c("Diferente", "Igual"),
title = "Comparación",
opacity = 1
) %>%
fitBounds(lng1 = min(datos$X), lat1 = min(datos$Y), lng2 = max(datos$X), lat2 = max(datos$Y))
}
})
output$p_medias <- renderPlot({
# Calcular promedios de rendimiento agrupados por ambiente
resumen <- datos %>%
group_by(cluster_cosecha) %>%
summarise(RindePromedio = mean(Rinde, na.rm = TRUE))  # Calcular el promedio del rendimiento
ggplot(resumen, aes(x = cluster_cosecha, y = RindePromedio, fill = cluster_cosecha)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.7) +  # Graficar barras
geom_text(aes(label = round(RindePromedio, 1)),  # Agregar etiquetas con los promedios
position = position_dodge(width = 0.7),
vjust = -0.5,  # Colocar texto sobre las barras
size = 5,  # Tamaño del texto
fontface = "bold") +
scale_fill_manual(values = c("Baja" = "red", "Media" = "yellow", "Alta" = "green")) +
labs(title = "Rendimiento por Ambiente",
y = "Rendimiento (tn)",
x = "Ambientes") +
theme_minimal() +  # Tema limpio
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14, face = "bold"),  # Texto eje X
axis.text.y = element_text(size = 14, face = "bold"),  # Texto eje Y
axis.title.x = element_text(size = 16, face = "bold"),  # Título eje X
axis.title.y = element_text(size = 16, face = "bold"),  # Título eje Y
plot.title = element_text(size = 18, face = "bold", hjust = 0.5)  # Título del gráfico
) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))  # Añadir espacio encima de las barras
})
# Gráfico de contingencia
output$grafico_contingencia <- renderPlot({
ggplot(frecuencias_df, aes(x = cluster_prescripciones, y = cluster_cosecha, fill = frecuencia)) +
geom_tile() +
geom_text(aes(label = paste0(round(frecuencia, 2), "%")), size = 5) +
scale_fill_gradientn(colours = c("red", "yellow", "green")) +
labs(title = "% de coincidencias", x = "Ambientes Prescripción", y = "Ambientes Cosecha") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.title = element_text(size = 16), plot.title = element_text(size = 12, face = "bold"), legend.title = element_blank(), legend.text = element_text(size = 14)) +
scale_y_discrete(expand = c(0, 0))
})
# Calcular el margen neto
datos_margen_neto <- reactive({
datos <- datos
req(input$precio_maiz, input$costo_semilla, input$costo_labores, input$costo_arrendamiento)
# Verificar si existe la columna `ferti` en los datos
if (!"ferti" %in% colnames(datos)) {
# Si no existe, ignorar el costo del fertilizante en el cálculo
datos <- datos %>%
mutate(
MargenNeto = (input$precio_maiz * Rinde) -
( (Semilla/1000* input$costo_semilla) + input$costo_labores + input$costo_arrendamiento + input$costo_fito + input$costo_arrancador)
)
} else {
# Si existe, incluir el fertilizante en el cálculo
datos <- datos %>%
mutate(
MargenNeto = (input$precio_maiz * Rinde) -
(input$costo_semilla + (ferti * input$costo_ferti) + input$costo_labores + input$costo_arrendamiento + input$costo_fito + input$costo_arrancador)
)
}
return(datos)
})
# Renderizar el mapa de margen neto
output$mapa_margen_neto <- renderLeaflet({
req("margen_neto" %in% input$mapas_seleccionados)
valid_data <- datos_margen_neto()
# Definir cortes basados en quantiles
if (min(valid_data$MargenNeto) < 0) {
# Si hay valores negativos, asegurarse de que 0 sea un corte
breaks <- c(quantile(valid_data$MargenNeto, probs = seq(0, 0.8, by = 0.2)), 0,
quantile(valid_data$MargenNeto, probs = seq(0.2, 1, by = 0.2)))
breaks <- sort(unique(breaks)) # Ordenar y eliminar duplicados
} else {
# Si todos los valores son positivos, simplemente usar quantiles
breaks <- quantile(valid_data$MargenNeto, probs = seq(0, 1, by = 1/6))
}
# Calcular porcentajes de área para cada rango
total_area <- sum(st_area(valid_data))
area_percents <- sapply(1:(length(breaks)-1), function(i) {
subset_data <- valid_data[valid_data$MargenNeto >= breaks[i] & valid_data$MargenNeto < breaks[i+1], ]
return(sum(st_area(subset_data)) / total_area * 100)
})
# Definir la paleta de colores
pal <- colorBin("RdYlGn", domain = valid_data$MargenNeto, bins = breaks)
# Crear un vector de colores basado en los cortes
colors <- sapply(breaks[-length(breaks)], pal)
# Construir etiquetas personalizadas
legend_labels <- mapply(function(b1, b2, ap) {
sprintf("%d - %d (%0.2f%%)", floor(b1), floor(b2), ap)
}, breaks[-length(breaks)], breaks[-1], area_percents)
# Crear mapa
leaflet(valid_data) %>%
addProviderTiles(providers$Esri.WorldImagery) %>%  # Imagen satelital de fondo
addPolygons(color = ~pal(MargenNeto),
weight = 1,
fillOpacity = 0.7,
label = ~sprintf("Margen Neto: USD %d", floor(MargenNeto)),
highlight = highlightOptions(weight = 3,
color = "#666",
fillOpacity = 0.9,
bringToFront = TRUE)) %>%
addLegend(
title = "Margen Neto",
labels = legend_labels,
colors = colors,
opacity = 0.8,
position = "bottomright",
labFormat = labelFormat(digits = 0, suffix = " USD"),
# Reducir el tamaño de las leyendas
className = "info legend legend-small"
)
})
output$indice_ajuste <- renderPlotly({
# Calcular el índice de ajuste de prescripciones
# Sumar las combinaciones perfectas
combinaciones_perfectas <- sum(frecuencias_relativas["Baja", "Baja"]) +
sum(frecuencias_relativas["Media", "Media"]) +
sum(frecuencias_relativas["Alta", "Alta"])
# Limitar las transiciones a un máximo del 30%
transiciones_media_alta <- min(frecuencias_relativas["Media", "Alta"], 30)
transiciones_media_baja <- min(frecuencias_relativas["Media", "Baja"], 30)
# Calcular las transiciones ajustadas
transiciones <- transiciones_media_alta + transiciones_media_baja
# Calcular el índice de ajuste
indice_ajuste <- (combinaciones_perfectas + transiciones) / 3
print(paste("Combinaciones perfectas:", combinaciones_perfectas))
print(paste("Transiciones:", transiciones))
print(paste("Índice de ajuste:", indice_ajuste))
# Crear el gráfico de medidor radial o podemos mejorar ???
fig <- plot_ly(
type = "indicator",
mode = "gauge+number",
value = indice_ajuste,
gauge = list(
axis = list(range = list(0, 100)),
steps = list(
list(range = c(0, 20), color = "red"),
list(range = c(20, 50), color = "yellow"),
list(range = c(50, 70), color = "lightgreen"),
list(range = c(70, 100), color = "green")
),
threshold = list(
line = list(color = "black", width = 4),
thickness = 0.75,
value = indice_ajuste
)
)
)
fig <- fig %>%
layout(
title = "Índice de Ajuste de Prescripciones"
)
fig
})
})
##---------------------------------------------------------------------------------------
##Foliares
# Reactivo para filtrar los datos en Foliares por región y cultivo
filteredDatafoliares <- reactive({
if (input$todas_regiones || "Todas" %in% input$regiones) {
data %>%
filter(Cultivo %in% input$cultivo)
} else {
data %>%
filter(Regiones %in% input$regiones, Cultivo %in% input$cultivo)
}
})
# Calcular el promedio de rendimiento y diferencia porcentual respecto al testigo
summaryData <- reactive({
data_filtered <- filteredDatafoliares()
testigo <- data_filtered %>% filter(Tratamiento == "Testigo")
promedio_testigo <- mean(testigo$Rinde, na.rm = TRUE)
data_filtered %>%
group_by(Region = if (input$todas_regiones || "Todas" %in% input$regiones) "Global" else Regiones, Cultivo, Tratamiento) %>%
summarise(Rinde_Promedio = mean(Rinde, na.rm = TRUE),
Diferencia_Porcentual = round(((Rinde_Promedio - promedio_testigo) / promedio_testigo) * 100, 1),
Dif = unique(Dif)) %>%
distinct(Cultivo, Tratamiento, .keep_all = TRUE)
})
# Crear el gráfico de barras
output$barPlot <- renderPlot({
ggplot(summaryData(), aes(x = Tratamiento, y = Rinde_Promedio, fill = Tratamiento)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = paste0(round(Diferencia_Porcentual, 1), "%")), vjust = -0.5, fontface = "bold") +
geom_text(aes(label = Dif), vjust = 1.5, color = "black") +
geom_text(aes(label = round(Rinde_Promedio, 1)), vjust = 15, fontface = "bold", color = "black", position = position_dodge(width = 0.9)) +
labs(title = "Rendimiento tn/ha",
x = "Tratamiento",
y = "Rinde tn/ha") +
theme_minimal() + theme(panel.background = element_rect(fill = 'transparent', color = NA))+
theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
})
# Crear la tabla resumen
output$summaryTable <- renderDataTable({
datatable(summaryData(), options = list(pageLength = 10))
})
#------------------------------------ indice de ajuste
}
shinyApp(ui = ui, server = server)
